##ArrayList
 
 ##接口实现
   List<E>, 
   标记接口  RandomAccess, --可快速访问,即访问速度为1次。
   标记接口 Cloneable, ----可克隆。
   标记接口 java.io.Serializable--可序列化。
 
 
 ##底层实现
   1.ArrayList底层是数组，可以根据Size动态增长。
 ##扩容
   1.ArrayList的默认长度为10。
   2.每一次扩容为当前长度的50%。
    依据  int newCapacity = oldCapacity + (oldCapacity >> 1);
   3.copy,新起一个数组，再将原始数据放到新的数组里去。
 ##遍历
   1.因为实现 RandomAccess 该接口，则 for循环的速度比Iterator迭代器快,出处RandomAccess文档。
   2.关于For,ForEach 循环。
        for在遍历数组结构的数据快。
        forEach在遍历链表数据比较快。
 ##线程安全
   1.否
 ##属性
 private static final long serialVersionUID = 8683452581122892189L;
 //默认长度
 private static final int DEFAULT_CAPACITY = 10;
 //空数组
 private static final Object[] EMPTY_ELEMENTDATA = {};
 //transient 不会被序列化(如实现Externalizable，并且手动序列化了)该修饰符将没有作用
  transient Object[] elementData;
  //构造一个空集合的时候，返回该属性
  private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};
  
  ##构造方法
  1.public ArrayList() {
            this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;
        }
  2.ArrayList(int  i){
        i==返回 EMPTY_ELEMENTDATA。
        i>0返回一个i长度的Object的数组
  
  }
  3.ArrayList(Collection<? extends E> c){
        c.长度为0 返回空数组。
        c.长度不为0 返回一个C长度的Object[]数组。
  
  }